diff --git a/deps/rabbit/src/rabbit_control_main.erl b/deps/rabbit/src/rabbit_control_main.erl
index 8c24589..a20f1ac 100644
--- a/deps/rabbit/src/rabbit_control_main.erl
+++ b/deps/rabbit/src/rabbit_control_main.erl
@@ -151,7 +151,8 @@ start() ->
               Inform = case Quiet of
                            true  -> fun (_Format, _Args1) -> ok end;
                            false -> fun (Format, Args1) ->
-                                            io:format(Format ++ " ...~n", Args1)
+					    DateTime = format_datetime(),
+					    io:format(DateTime ++ " " ++ Format ++ "~n", Args1)
                                     end
                        end,
               try
@@ -268,12 +269,14 @@ do_action(Command, Node, Args, Opts, Inform, Timeout) ->
 action(stop, Node, Args, _Opts, Inform) ->
     Inform("Stopping and halting node ~p", [Node]),
     Res = call(Node, {rabbit, stop_and_halt, []}),
+    Inform("Completed stop and halt of rabbit application. Result: ~s", [Res]),
     case {Res, Args} of
         {ok, [PidFile]} -> wait_for_process_death(
-                             read_pid_file(PidFile, false));
+                             read_pid_file(PidFile, false), Inform);
         {ok, [_, _| _]} -> exit({badarg, Args});
         _               -> ok
     end,
+    Inform("Stopping and halting node ~p complete", [Node]),
     Res;
 
 action(stop_app, Node, [], _Opts, Inform) ->
@@ -754,11 +757,13 @@ while_process_is_alive(Node, Pid, Activity) ->
         false -> {error, process_not_running}
     end.
 
-wait_for_process_death(Pid) ->
+wait_for_process_death(Pid, Inform) ->
+    Inform("Waiting for process death. Pid: ~s", [Pid]),
     case rabbit_misc:is_os_process_alive(Pid) of
         true  -> timer:sleep(?EXTERNAL_CHECK_INTERVAL),
-                 wait_for_process_death(Pid);
-        false -> ok
+                 wait_for_process_death(Pid, Inform);
+        false -> Inform("Process has died. Pid: ~s", [Pid]),
+                 ok
     end.
 
 read_pid_file(PidFile, Wait) ->
@@ -978,3 +983,11 @@ alarms_by_node(Name) ->
             {_, As} = lists:keyfind(alarms, 1, Status),
             {Name, As}
     end.
+
+format_datetime() ->
+    {{Year, Month, Day}, {Hour, Minute, Second}} =
+        calendar:now_to_datetime(erlang:now()),
+    lists:flatten(
+        io_lib:format(
+            "~4..0w-~2..0w-~2..0wT~2..0w:~2..0w:~2..0w",
+            [Year,Month,Day,Hour,Minute,Second])).
