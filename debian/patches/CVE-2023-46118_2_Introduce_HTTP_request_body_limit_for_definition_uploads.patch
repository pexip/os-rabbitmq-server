Description: CVE-2023-46118 (2/2): Introduce HTTP request body limit for definition uploads
 The default is 20 MiB, which is enough to upload
 a definition file with 200K queues, a few virtual host
 and a few users. In other words, it should accomodate
 a lot of environments.
Author: Michael Klishin <klishinm@vmware.com>
Date: Sat, 14 Oct 2023 06:11:01 -0400
Bug-Debian: https://bugs.debian.org/1056723
Origin: upstream, https://github.com/rabbitmq/rabbitmq-server/commit/b7b3514bb1f71cdad552ba712f683b4d427c4aec
Last-Update: 2023-11-27

Index: rabbitmq-server/deps/rabbitmq_management/include/rabbit_mgmt.hrl
===================================================================
--- rabbitmq-server.orig/deps/rabbitmq_management/include/rabbit_mgmt.hrl
+++ rabbitmq-server/deps/rabbitmq_management/include/rabbit_mgmt.hrl
@@ -11,3 +11,5 @@
 
 -define(MANAGEMENT_PG_SCOPE, rabbitmq_management).
 -define(MANAGEMENT_PG_GROUP, management_db).
+
+-define(MANAGEMENT_DEFAULT_HTTP_MAX_BODY_SIZE, 10000000).
Index: rabbitmq-server/deps/rabbitmq_management/priv/schema/rabbitmq_management.schema
===================================================================
--- rabbitmq-server.orig/deps/rabbitmq_management/priv/schema/rabbitmq_management.schema
+++ rabbitmq-server/deps/rabbitmq_management/priv/schema/rabbitmq_management.schema
@@ -36,6 +36,23 @@ fun(Conf) ->
 end}.
 
 
+%% Max HTTP body limit
+
+{mapping, "management.http.max_body_size", "rabbitmq_management.max_http_body_size",
+    [{datatype, integer}, {validators, ["non_negative_integer"]}]}.
+
+{translation, "rabbitmq_management.max_http_body_size",
+fun(Conf) ->
+    case cuttlefish:conf_get("management.http.max_body_size", Conf, undefined) of
+        %% 20 MiB allows for about 200K queues across a small (single digit) number of virtual hosts with
+        %% an equally small number of users. MK.
+        undefined                -> 20000000;
+        Val when is_integer(Val) -> Val;
+        Other                    -> cuttlefish:invalid("management.http.max_body_size must be set to a positive integer")
+    end
+end}.
+
+
 %% HTTP (TCP) listener options ========================================================
 
 %% HTTP listener consistent with Web STOMP and Web MQTT.
Index: rabbitmq-server/deps/rabbitmq_management/src/rabbit_mgmt_util.erl
===================================================================
--- rabbitmq-server.orig/deps/rabbitmq_management/src/rabbit_mgmt_util.erl
+++ rabbitmq-server/deps/rabbitmq_management/src/rabbit_mgmt_util.erl
@@ -797,15 +797,27 @@ id0(Key, ReqData) ->
 
 read_complete_body(Req) ->
     read_complete_body(Req, <<"">>).
-read_complete_body(Req0, Acc) ->
-    case cowboy_req:read_body(Req0) of
-        {ok, Data, Req}   -> {ok, <<Acc/binary, Data/binary>>, Req};
-        {more, Data, Req} -> read_complete_body(Req, <<Acc/binary, Data/binary>>)
+read_complete_body(Req, Acc) ->
+    BodySizeLimit = application:get_env(rabbitmq_management, max_http_body_size, ?MANAGEMENT_DEFAULT_HTTP_MAX_BODY_SIZE),
+    read_complete_body(Req, Acc, BodySizeLimit).
+read_complete_body(Req0, Acc, BodySizeLimit) ->
+    case bit_size(Acc) > BodySizeLimit of
+        true ->
+            {error, "Exceeded HTTP request body size limit"};
+        false ->
+            case cowboy_req:read_body(Req0) of
+                {ok, Data, Req}   -> {ok, <<Acc/binary, Data/binary>>, Req};
+                {more, Data, Req} -> read_complete_body(Req, <<Acc/binary, Data/binary>>)
+            end
     end.
 
 with_decode(Keys, ReqData, Context, Fun) ->
-    {ok, Body, ReqData1} = read_complete_body(ReqData),
-    with_decode(Keys, Body, ReqData1, Context, Fun).
+    case read_complete_body(ReqData) of
+        {error, Reason} ->
+            bad_request(Reason, ReqData, Context);
+        {ok, Body, ReqData1} ->
+            with_decode(Keys, Body, ReqData1, Context, Fun)
+    end.
 
 with_decode(Keys, Body, ReqData, Context, Fun) ->
     case decode(Keys, Body) of
Index: rabbitmq-server/deps/rabbitmq_management/src/rabbit_mgmt_wm_definitions.erl
===================================================================
--- rabbitmq-server.orig/deps/rabbitmq_management/src/rabbit_mgmt_wm_definitions.erl
+++ rabbitmq-server/deps/rabbitmq_management/src/rabbit_mgmt_wm_definitions.erl
@@ -86,8 +86,15 @@ all_definitions(ReqData, Context) ->
       Context).
 
 accept_json(ReqData0, Context) ->
-    {ok, Body, ReqData} = rabbit_mgmt_util:read_complete_body(ReqData0),
-    accept(Body, ReqData, Context).
+    case rabbit_mgmt_util:read_complete_body(ReqData0) of
+        {error, Reason} ->
+            BodySizeLimit = application:get_env(rabbitmq_management, max_http_body_size, ?MANAGEMENT_DEFAULT_HTTP_MAX_BODY_SIZE),
+            _ = rabbit_log:warning("HTTP API: uploaded definition file exceeded the maximum request body limit of ~p bytes. "
+                                   "Use the 'management.http.max_body_size' key in rabbitmq.conf to increase the limit if necessary", [BodySizeLimit]),
+            rabbit_mgmt_util:bad_request(Reason, ReqData0, Context);
+        {ok, Body, ReqData} ->
+            accept(Body, ReqData, Context)
+    end.
 
 vhost_definitions(ReqData, VHost, Context) ->
     %% rabbit_mgmt_wm_<>:basic/1 filters by VHost if it is available
